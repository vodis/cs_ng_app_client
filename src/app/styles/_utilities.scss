@use 'sass:math';
@use 'sass:list';

@import './variables';

@mixin utilityClasses($properties, $prefix, $values, $important: true) {
  @if list.separator($properties) != comma {
    @each $name, $value in $values {
      .#{$prefix}-#{$name} {
        #{$properties}: $value #{if($important, '!important', '')};
      }
    }

    @each $modifier, $breakpoint in $breakpoints {
      @include media-breakpoint-up($modifier) {
        @each $name, $value in $values {
          .#{$prefix}-#{$modifier}-up-#{$name} {
            #{$properties}: $value #{if($important, '!important', '')};
          }
        }
      }

      @include media-breakpoint($modifier) {
        @each $name, $value in $values {
          .#{$prefix}-#{$modifier}-#{$name} {
            #{$properties}: $value #{if($important, '!important', '')};
          }
        }
      }

      @include media-breakpoint-down($modifier) {
        @each $name, $value in $values {
          .#{$prefix}-#{$modifier}-down-#{$name} {
            #{$properties}: $value #{if($important, '!important', '')};
          }
        }
      }
    }
  } @else {
    @each $property in $properties {
      @each $name, $value in $values {
        .#{$prefix}-#{$name} {
          #{$property}: $value #{if($important, '!important', '')};
        }
      }
    }

    @each $modifier, $breakpoint in $breakpoints {
      @include media-breakpoint-up($modifier) {
        @each $property in $properties {
          @each $name, $value in $values {
            .#{$prefix}-#{modifier}-up-#{$name} {
              #{$property}: $value #{if($important, '!important', '')};
            }
          }
        }
      }

      @include media-breakpoint($modifier) {
        @each $property in $properties {
          @each $name, $value in $values {
            .#{$prefix}-#{modifier}-#{$name} {
              #{$property}: $value #{if($important, '!important', '')};
            }
          }
        }
      }

      @include media-breakpoint-down($modifier) {
        @each $property in $properties {
          @each $name, $value in $values {
            .#{$prefix}-#{modifier}-down-#{$name} {
              #{$property}: $value #{if($important, '!important', '')};
            }
          }
        }
      }
    }
  }
}

// size
@include utilityClasses(
  width,
  w,
  (
    100: 100%,
    50: 50%,
    33: 33%,
  )
);
@include utilityClasses(
  width,
  w-100,
  (
    100: 100%,
  )
);
@include utilityClasses(
  height,
  h-100,
  (
    100: 100%,
  )
);

// spacing
$spacers: (
  0: 0,
  1: 0.8rem,
  2: 1.6rem,
  3: 2.4rem,
  4: 3.2rem,
  5: 4rem,
  auto: auto,
);

@include utilityClasses(margin, m, $spacers, true);
@include utilityClasses(margin-left, ml, $spacers, false);
@include utilityClasses(margin-top, mt, $spacers, false);
@include utilityClasses(margin-right, mr, $spacers, false);
@include utilityClasses(margin-bottom, mb, $spacers, false);
@include utilityClasses((margin-left, margin-right), mx, $spacers, false);
@include utilityClasses((margin-top, margin-bottom), my, $spacers, false);

// hidden
.hidden {
  display: none !important;
}

// display
@include utilityClasses(
  display,
  d,
  (
    block: block,
    flex: flex,
  )
);

// flex
@include utilityClasses(
  flex-direction,
  flex-direction,
  (
    row: row,
    row-reverse: row-reverse,
    column: column,
    column-reverse: column-reverse,
  ),
  true
);
@include utilityClasses(
  justify-content,
  justify-content,
  (
    start: flex-start,
    center: center,
    between: space-between,
    end: flex-end,
  ),
  false
);
@include utilityClasses(
  align-items,
  align-items,
  (
    start: flex-start,
    center: center,
    end: flex-end,
  ),
  false
);
@include utilityClasses(
  flex-wrap,
  flex-wrap,
  (
    wrap: wrap,
    nowrap: nowrap,
  ),
  false
);

// text-transform
@include utilityClasses(
  text-transform,
  tt,
  (
    none: none,
    uppercase: uppercase,
    lowercase: lowercase,
    capitalize: capitalize,
  )
);

// text-align
@include utilityClasses(
  text-align,
  ta,
  (
    center: center,
    left: left,
    right: right,
  )
);

@each $modifier, $breakpoint in $breakpoints {
  @include media-breakpoint-up($modifier) {
    .hidden-#{$modifier}-up {
      display: none !important;
    }
  }

  @include media-breakpoint($modifier) {
    .hidden-#{$modifier} {
      display: none !important;
    }
  }

  @include media-breakpoint-down($modifier) {
    .hidden-#{$modifier}-down {
      display: none !important;
    }
  }
}
